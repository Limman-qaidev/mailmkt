"""Web server for tracking email engagement events.

This module exposes a typed API using FastAPI.  It records events such as
opens (via a pixel), clicks, unsubscribes and complaints into a local
SQLite database.  The server can be run standalone::

    uvicorn email_marketing.tracking.server:app --reload

or embedded inside the Streamlit dashboard through :func:`create_app`.
"""

from __future__ import annotations

import base64
import datetime as dt
import os
import sqlite3
import uuid
from typing import Optional

from fastapi import FastAPI, Request, Response
from fastapi.responses import PlainTextResponse, RedirectResponse
from pydantic import BaseModel, EmailStr


def _get_db_path() -> str:
    return os.path.join(
        os.path.dirname(os.path.abspath(__file__)),
        "..",
        "data",
        "email_events.db",
    )


def _init_db() -> None:
    os.makedirs(os.path.dirname(_get_db_path()), exist_ok=True)
    with sqlite3.connect(_get_db_path()) as conn:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                msg_id TEXT NOT NULL,
                event_type TEXT NOT NULL,
                client_ip TEXT,
                ts TEXT NOT NULL
            )
            """
        )


def _record_event(msg_id: str,
                  event_type: str,
                  client_ip: Optional[str]
                  ) -> None:
    """Insert a new event into the SQLite database."""
    with sqlite3.connect(_get_db_path()) as conn:
        conn.execute(
            "INSERT INTO events (msg_id, event_type, client_ip, ts) "
            "VALUES (?, ?, ?, ?)",
            (msg_id, event_type, client_ip, dt.datetime.utcnow().isoformat()),
        )
        conn.commit()


app = FastAPI(title="Mailmkt Tracking API")

_init_db()


class ClickEvent(BaseModel):
    msg_id: str
    url: str


class MsgEvent(BaseModel):
    msg_id: str


class SubscribeRequest(BaseModel):
    email: EmailStr


@app.get("/pixel", response_class=Response,
         summary="Tracking pixel")
async def pixel(request: Request, msg_id: str) -> Response:
    """Return a 1×1 transparent GIF and record an 'open' event.

    The ``msg_id`` query parameter identifies the message.  The client IP
    address is extracted from the request.  The returned response has an
    image/gif content type.
    """
    client_ip = request.client.host if request.client else None
    print(f"[DEBUG] PIXEL HIT msg_id={msg_id} from {request.client.host}")
    _record_event(msg_id, "open", client_ip)
    # A 1×1 transparent GIF encoded in base64
    gif_base64 = "R0lGODlhAQABAPAAAP///wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw=="
    pixel_bytes = base64.b64decode(gif_base64)
    return Response(content=pixel_bytes, media_type="image/gif")


@app.get("/click", response_class=RedirectResponse,
         summary="Record click via GET and redirect")
async def click_get(request: Request,
                    msg_id: str,
                    url: str
                    ) -> RedirectResponse:
    """Record a click event via GET and redirect to the target URL."""
    client_ip = request.client.host if request.client else None
    print(f"[DEBUG] CLICK HIT msg_id={msg_id}, redirecting to {url}")
    _record_event(msg_id, "click", client_ip)
    return RedirectResponse(url)


@app.get("/unsubscribe", response_class=PlainTextResponse,
         summary="Handle unsubscribe via GET")
async def unsubscribe_get(request: Request, msg_id: str) -> PlainTextResponse:
    """Record an unsubscribe event via GET and confirm."""
    client_ip = request.client.host if request.client else None
    print(f"[DEBUG] UNSUBSCRIBE HIT msg_id={msg_id}")
    _record_event(msg_id, "unsubscribe", client_ip)
    return PlainTextResponse("You have been unsubscribed")


@app.get("/complaint", response_class=PlainTextResponse,
         summary="Handle complaint via GET")
async def complaint_get(request: Request, msg_id: str) -> PlainTextResponse:
    """Record a spam complaint event via GET and confirm."""
    client_ip = request.client.host if request.client else None
    print(f"[DEBUG] COMPLAINT HIT msg_id={msg_id}")
    _record_event(msg_id, "complaint", client_ip)
    return PlainTextResponse("Thank you, your complaint has been recorded")


@app.post("/subscribe", response_class=PlainTextResponse,
          summary="Request double opt-in")
async def subscribe(req: SubscribeRequest) -> str:
    """Initiate a double opt‑in process.

    Generates a confirmation token and would normally send a confirmation
    email.  Here we simply return the token for demonstration purposes.
    """
    token = uuid.uuid4().hex
    return token


@app.get("/confirm/{token}", response_class=PlainTextResponse,
         summary="Confirm subscription")
async def confirm(token: str) -> str:
    """Confirm a subscription given a token generated by :func:`subscribe`."""
    return f"subscription confirmed: {token}"


def create_app() -> FastAPI:
    """Return the FastAPI application instance.

    Exposing this function allows the tracking server to be embedded in
    arbitrary host environments (e.g. Streamlit).  It simply returns the
    module level ``app``.
    """
    return app


# --- Click HEAD handler ---
@app.head("/click", include_in_schema=False)
async def click_head(request: Request, msg_id: str, url: str) -> Response:
    client_ip = request.client.host if request.client else None
    _record_event(msg_id, "click", client_ip)
    # Devolvemos sólo la cabecera de redirección (301/307) sin cuerpo
    return Response(status_code=307, headers={"Location": url})

# --- Unsubscribe HEAD handler ---
@app.head("/unsubscribe", include_in_schema=False)
async def unsubscribe_head(request: Request, msg_id: str) -> Response:
    client_ip = request.client.host if request.client else None
    _record_event(msg_id, "unsubscribe", client_ip)
    return Response(status_code=200)

# --- Complaint HEAD handler ---
@app.head("/complaint", include_in_schema=False)
async def complaint_head(request: Request, msg_id: str) -> Response:
    client_ip = request.client.host if request.client else None
    _record_event(msg_id, "complaint", client_ip)
    return Response(status_code=200)